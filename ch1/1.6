1.6.1) For the block-structured C code below, indicates the values assigned to w, x, y, and z.
int w, x, y, z;
int i = 4; int j = 5;
{
	int j = 7;
	i = 6;
	w = i + j;
}
x = i + j;
{
	int i = 8;
	y = i + j;
}
z = i + j;

Answer: w = 13, x = 11, y = 13, z = 11

1.6.2) Repeat 1.6.1 for code below.
int w, x, y, z;
int i = 3; int j = 4;
{
	int i = 5;
	w = i + j;
}
x = i + j;
{
	int j = 6;
	i = 7;
	y = i + j;
}
z = i + j;

Answer: w = 9, x = 7, y = 13, z = 11

1.6.3) For the code below, assuming the usual static scoping of declarations, give the scope for each of the twelve declarations.
{
	int w, x, y, z; 	// B1		w: B1, B2	x: B1	y: B1, B2, B3, B4	z: B1, B4
	{
		int x, z;	// B2			x: B2, z: B2, B3
		{
			int w, x;	// B3		w: B3, x: B3
		}
	}
	{
		int w, x;	// B4			w: B4, B5	x: B4, B5
		{
			int y, z;	// B5		y: B5, z: B5
		}
	}
}

1.6.4) What is printed by the following C code?
#define a (x+1)
int x = 2;
void b() { x = a; printf("%d\n", x); }
void c() { int x = 1; printf("%d\n", a); }
void main() { b(); c(); }

3
2
