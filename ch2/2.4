2.4.1) Construct recursive-descent parsers, starting with the following grammars:
a) S -> + S S | - S S | a
void S() {
	switch(lookahead) {
		case '+':
			match('+'); S(); S();
			break;
		case '-':
			match('-'); S(); S();
			break;
		case 'a':
			match('a');
			break;
		default:
			report("syntax error");
	}
}

void match(term t) {
	if (t == lookahead) {
		lookahead = next();
	} else {
		report("syntax error");
	}
}

b) S -> S (S) S | eps
void S() {
	if (lookahead == '(') {
		match('('); S(); match(')'); S();
	}
}

c) S -> 0 S 1 | 0 1
void S() {
	switch(lookahead) {
		case '0':
			match('0'); S(); match('1');
			break;
		case '1':
			// The only time S starts with '1' is for the middle term "01". After '0' is matched, lookahead jumps to '1'.
			// There is no need to match here, since it will be matched by the procedure corresponding to '0'.
			break;
		default:
			report("syntax error");
	}
}